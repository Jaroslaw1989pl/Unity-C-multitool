using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Globalization;


public class LengthConverter : MonoBehaviour
{
    public Text input;
    public Text output;
    public Dropdown dropdown_FROM;
    public Dropdown dropdown_TO;

    public Dropdown language_dropdown;

    public bool disabled = true;
    public GameObject swap_button_1;
    public GameObject swap_button_2;

    double in_num;
    int digit_counter;
    string in_txt_to_num;
    public bool was_swap; 

    // Start is called before the first frame update
    void Start()
    {
        input.fontStyle = FontStyle.Bold;
        digit_counter = 1;
        input.text = "0";
        output.text = "0";
        swap_button_1.SetActive(false);        
    }

    // Update is called once per frame
    public void Update()
    {
        CurrentCultureToNew();     
    }

    public void ConversionFunction()
    {
        input.text = InputTextSpaceSeparator(input.text.Replace(NumGroupSeparator(), string.Empty));
        in_txt_to_num = input.text.Replace(NumGroupSeparator(), string.Empty);
        in_num = StringToDouble(in_txt_to_num); //funkcja konwertująca string na double

        string temp_out_string = ConvertingFunction().ToString();
        output.text = OutputTextSpaceSeparator(temp_out_string);
    }

    double ConvertingFunction()
    {
        return in_num / Scale(dropdown_FROM.value) * Scale(dropdown_TO.value);
    }

    double Scale(int drop_val)
    {
        if (drop_val == 0) return 1000000000;
        else if (drop_val == 1) return 1000000;
        else if (drop_val == 2) return 1000;
        else if (drop_val == 3) return 100;
        else if (drop_val == 4) return 1;
        else if (drop_val == 5) return 0.001;
        else if (drop_val == 6) return 39.37008;
        else if (drop_val == 7) return 3.28084;
        else if (drop_val == 8) return 1.093613;
        else if (drop_val == 9) return 0.000621;
        else if (drop_val == 10) return 0.00054;
        else return 0;
    }
    
    double StringToDouble(string str)
    {
        if ((str.IndexOf(DecimalSeparator()) == -1 || str.IndexOf(DecimalSeparator()) == str.Length - 1)) return double.Parse(str);
        else
        {
            string s1 = str.Substring(0, str.IndexOf(DecimalSeparator())); //pierwszy double przed przecinkiem
            double in_num_a = double.Parse(s1);

            string s2 = str.Substring(str.IndexOf(DecimalSeparator()) + 1); //drugi double po przecinku
            double in_num_b = double.Parse(s2) / Math.Pow(10, s2.Length);

            return in_num_a + in_num_b;
        }
    }

    public void CurrentCultureToNew()
    {
        CultureInfo newCulture;

        if (language_dropdown.value == 0) newCulture = new CultureInfo("en-US"); //.
        else if (language_dropdown.value == 1) newCulture = new CultureInfo("ar-SA");
        else if (language_dropdown.value == 2) newCulture = new CultureInfo("zh-CN"); //.
        else if (language_dropdown.value == 3) newCulture = new CultureInfo("fr-FR"); 
        else if (language_dropdown.value == 4) newCulture = new CultureInfo("he-IL"); //.
        else if (language_dropdown.value == 5) newCulture = new CultureInfo("es-ES");
        else if (language_dropdown.value == 6) newCulture = new CultureInfo("de-DE");
        else if (language_dropdown.value == 7) newCulture = new CultureInfo("pl-PL");
        else if (language_dropdown.value == 8) newCulture = new CultureInfo("ru-RU");
        else if (language_dropdown.value == 9) newCulture = new CultureInfo("tr-TR"); 
        else newCulture = new CultureInfo("en-US"); //.

        CultureInfo.CurrentCulture = newCulture;

        Debug.Log(CultureInfo.CurrentCulture.Name);
        Debug.Log(">"+CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator+"<");
    }

    string OutputTextSpaceSeparator(string s)
    {
        string s1;
        string s2="";
        int a = 0;
        if (s.IndexOf(DecimalSeparator()) != -1 && s.IndexOf(DecimalSeparator()) == s.Length - 1) s1 = s.Substring(0, s.Length - 1);
        else if (s.IndexOf(DecimalSeparator()) != -1 && s.IndexOf(DecimalSeparator()) != s.Length - 1)
        {
            s1 = s.Substring(0, s.IndexOf(DecimalSeparator()));
            s2 = s.Substring(s.IndexOf(DecimalSeparator()));
        }
        /*else if (s.IndexOf('.') != -1 && s.IndexOf('.') != s.Length - 1)
        {
            s1 = s.Substring(0, s.IndexOf('.'));
            s2 = s.Substring(s.IndexOf('.'));
        }*/
        else s1 = s;

        for (int i = s1.Length - 1; i > 0; i--)
        {
            a++;
            if (a % 3 == 0)
            {
                if (a == 3) s1 = s1.Insert(s1.Length - a, NumGroupSeparator());
                else s1 = s1.Insert(s1.IndexOf(NumGroupSeparator()) - 3, NumGroupSeparator());
            }
        }
        return s1+s2;
    }
    string InputTextSpaceSeparator(string s)
    {
        string s1;
        string s2 = "";
        int a = 0;
        if (s.IndexOf(DecimalSeparator()) != -1 && s.IndexOf(DecimalSeparator()) == s.Length - 1) s1 = s.Substring(0, s.Length - 1);
        else if (s.IndexOf(DecimalSeparator()) != -1 && s.IndexOf(DecimalSeparator()) != s.Length - 1)
        {
            s1 = s.Substring(0, s.IndexOf(DecimalSeparator()));
            s2 = s.Substring(s.IndexOf(DecimalSeparator()));
        }
        /*else if (s.IndexOf('.') != -1 && s.IndexOf('.') != s.Length - 1)
        {
            s1 = s.Substring(0, s.IndexOf('.'));
            s2 = s.Substring(s.IndexOf('.'));
        }*/
        else s1 = s;

        for (int i = s1.Length - 1; i > 0; i--)
        {
            a++;
            if (a % 3 == 0)
            {
                if (a == 3) s1 = s1.Insert(s1.Length - a, NumGroupSeparator());
                else s1 = s1.Insert(s1.IndexOf(NumGroupSeparator()) - 3, NumGroupSeparator());
            }
        }
        if (s.IndexOf(DecimalSeparator()) != -1 && s.IndexOf(DecimalSeparator()) == s.Length - 1) return s1 + DecimalSeparator();
        else return s1 + s2;
    }

    //KEYBOARD
    public void NumButton(string digit)
    {
        if (digit_counter < 15)
        {
            if (was_swap == true || (input.text == "0" && input.text.Length == 1))
            {
                input.text = digit;
                was_swap = false;
                digit_counter = 1;
            }
            else
            {
                input.text += digit;
                digit_counter++;
            }
        }

        ConversionFunction();

        //Debug.Log("Licznik cyfr: " + digit_counter);
    }

    public void DotButton()
    {
        if (digit_counter < 15) //wartość -1 gdy nie znajduje znaku
        {

            if (was_swap == true)
            {
                input.text = "0" + DecimalSeparator();
                was_swap = false;
            }
            else
            {
                if (input.text.IndexOf(DecimalSeparator()) == -1)
                {
                    input.text += DecimalSeparator();
                    was_swap = false;
                }
            }
        }

        ConversionFunction();

        //Debug.Log("Licznik cyfr: " + digit_counter);
        //Debug.Log("Pozycja separatora: " + input.text.IndexOf('#'));
        //Debug.Log("Długość tekstu: " + input.text.Length);
    }

    public void CEButton()
    {
        input.text = "0";
        output.text = "0";
        digit_counter = 1;

        //Debug.Log("Licznik cyfr: " + digit_counter);
    }

    public void BackspaceButton()
    {
        int in_text_length = input.text.Length;
        if (was_swap == true)
        {
            CEButton();
            was_swap = false;
        }
        else
        {
            if (in_text_length > 1)
            {
                input.text = input.text.Remove(in_text_length - 1);
                digit_counter--;
            }
            else if (in_text_length == 1) CEButton();

            ConversionFunction();
        }        

        //Debug.Log("Licznik cyfr: " + digit_counter);
    }

    public void TextInputSwap()
    {
        Text text_buffer = input;
        input = output;
        output = text_buffer;

        input.fontStyle = FontStyle.Bold; //pogrubienie czcionki wejściowego pola tekstowego
        output.fontStyle = FontStyle.Normal;

        Dropdown drop_buffer = dropdown_FROM;
        dropdown_FROM = dropdown_TO;
        dropdown_TO = drop_buffer;

        if(disabled ==true)
        {
            swap_button_1.SetActive(true);
            swap_button_2.SetActive(false);
            disabled = false;
        }
        else if (disabled == false)
        {
            swap_button_2.SetActive(true);
            swap_button_1.SetActive(false);
            disabled = true;
        }

        was_swap = true;
    }

    //SEPARATORS
    public string DecimalSeparator()
    {
        //Debug.Log("separator: " + CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator);
        if (CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ".") return ".";
        else if (CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator == ",") return ",";
        
        return ".";
    }

    public string NumGroupSeparator()
    {
        if (CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator == ",") return ",";
        else if (CultureInfo.CurrentCulture.NumberFormat.NumberGroupSeparator == " ") return " ";
        return " ";
    }
}
